//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LiteDBClient.PersonReviewRepository {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RepositoryModelBase", Namespace="http://schemas.datacontract.org/2004/07/LiteDBService.DBProvider.BaseObjects")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(LiteDBClient.PersonReviewRepository.Review))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(LiteDBClient.PersonReviewRepository.Person))]
    public partial class RepositoryModelBase : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Review", Namespace="http://schemas.datacontract.org/2004/07/ModelLibrary")]
    [System.SerializableAttribute()]
    public partial class Review : LiteDBClient.PersonReviewRepository.RepositoryModelBase {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LiteDBClient.PersonReviewRepository.Person AuthorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MovieIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ScoreField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LiteDBClient.PersonReviewRepository.Person Author {
            get {
                return this.AuthorField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorField, value) != true)) {
                    this.AuthorField = value;
                    this.RaisePropertyChanged("Author");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MovieId {
            get {
                return this.MovieIdField;
            }
            set {
                if ((this.MovieIdField.Equals(value) != true)) {
                    this.MovieIdField = value;
                    this.RaisePropertyChanged("MovieId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Score {
            get {
                return this.ScoreField;
            }
            set {
                if ((this.ScoreField.Equals(value) != true)) {
                    this.ScoreField = value;
                    this.RaisePropertyChanged("Score");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Person", Namespace="http://schemas.datacontract.org/2004/07/ModelLibrary")]
    [System.SerializableAttribute()]
    public partial class Person : LiteDBClient.PersonReviewRepository.RepositoryModelBase {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SurnameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Surname {
            get {
                return this.SurnameField;
            }
            set {
                if ((object.ReferenceEquals(this.SurnameField, value) != true)) {
                    this.SurnameField = value;
                    this.RaisePropertyChanged("Surname");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PersonReviewRepository.IPersonReviewRepositoryService")]
    public interface IPersonReviewRepositoryService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonReviewRepositoryService/CreatePerson", ReplyAction="http://tempuri.org/IPersonReviewRepositoryService/CreatePersonResponse")]
        int CreatePerson(LiteDBClient.PersonReviewRepository.Person model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonReviewRepositoryService/CreatePerson", ReplyAction="http://tempuri.org/IPersonReviewRepositoryService/CreatePersonResponse")]
        System.Threading.Tasks.Task<int> CreatePersonAsync(LiteDBClient.PersonReviewRepository.Person model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonReviewRepositoryService/ReadPerson", ReplyAction="http://tempuri.org/IPersonReviewRepositoryService/ReadPersonResponse")]
        LiteDBClient.PersonReviewRepository.Person ReadPerson(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonReviewRepositoryService/ReadPerson", ReplyAction="http://tempuri.org/IPersonReviewRepositoryService/ReadPersonResponse")]
        System.Threading.Tasks.Task<LiteDBClient.PersonReviewRepository.Person> ReadPersonAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonReviewRepositoryService/ReadPeople", ReplyAction="http://tempuri.org/IPersonReviewRepositoryService/ReadPeopleResponse")]
        LiteDBClient.PersonReviewRepository.Person[] ReadPeople(int[] ids);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonReviewRepositoryService/ReadPeople", ReplyAction="http://tempuri.org/IPersonReviewRepositoryService/ReadPeopleResponse")]
        System.Threading.Tasks.Task<LiteDBClient.PersonReviewRepository.Person[]> ReadPeopleAsync(int[] ids);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonReviewRepositoryService/ReadAllPeople", ReplyAction="http://tempuri.org/IPersonReviewRepositoryService/ReadAllPeopleResponse")]
        LiteDBClient.PersonReviewRepository.Person[] ReadAllPeople();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonReviewRepositoryService/ReadAllPeople", ReplyAction="http://tempuri.org/IPersonReviewRepositoryService/ReadAllPeopleResponse")]
        System.Threading.Tasks.Task<LiteDBClient.PersonReviewRepository.Person[]> ReadAllPeopleAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonReviewRepositoryService/UpdatePerson", ReplyAction="http://tempuri.org/IPersonReviewRepositoryService/UpdatePersonResponse")]
        LiteDBClient.PersonReviewRepository.Person UpdatePerson(LiteDBClient.PersonReviewRepository.Person model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonReviewRepositoryService/UpdatePerson", ReplyAction="http://tempuri.org/IPersonReviewRepositoryService/UpdatePersonResponse")]
        System.Threading.Tasks.Task<LiteDBClient.PersonReviewRepository.Person> UpdatePersonAsync(LiteDBClient.PersonReviewRepository.Person model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonReviewRepositoryService/DeletePerson", ReplyAction="http://tempuri.org/IPersonReviewRepositoryService/DeletePersonResponse")]
        bool DeletePerson(LiteDBClient.PersonReviewRepository.Person model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonReviewRepositoryService/DeletePerson", ReplyAction="http://tempuri.org/IPersonReviewRepositoryService/DeletePersonResponse")]
        System.Threading.Tasks.Task<bool> DeletePersonAsync(LiteDBClient.PersonReviewRepository.Person model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonReviewRepositoryService/CreateReview", ReplyAction="http://tempuri.org/IPersonReviewRepositoryService/CreateReviewResponse")]
        int CreateReview(LiteDBClient.PersonReviewRepository.Review model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonReviewRepositoryService/CreateReview", ReplyAction="http://tempuri.org/IPersonReviewRepositoryService/CreateReviewResponse")]
        System.Threading.Tasks.Task<int> CreateReviewAsync(LiteDBClient.PersonReviewRepository.Review model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonReviewRepositoryService/ReadReview", ReplyAction="http://tempuri.org/IPersonReviewRepositoryService/ReadReviewResponse")]
        LiteDBClient.PersonReviewRepository.Review ReadReview(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonReviewRepositoryService/ReadReview", ReplyAction="http://tempuri.org/IPersonReviewRepositoryService/ReadReviewResponse")]
        System.Threading.Tasks.Task<LiteDBClient.PersonReviewRepository.Review> ReadReviewAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonReviewRepositoryService/ReadPersonByNameAndSurname", ReplyAction="http://tempuri.org/IPersonReviewRepositoryService/ReadPersonByNameAndSurnameRespo" +
            "nse")]
        LiteDBClient.PersonReviewRepository.Person ReadPersonByNameAndSurname(string name, string surname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonReviewRepositoryService/ReadPersonByNameAndSurname", ReplyAction="http://tempuri.org/IPersonReviewRepositoryService/ReadPersonByNameAndSurnameRespo" +
            "nse")]
        System.Threading.Tasks.Task<LiteDBClient.PersonReviewRepository.Person> ReadPersonByNameAndSurnameAsync(string name, string surname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonReviewRepositoryService/ReadReviews", ReplyAction="http://tempuri.org/IPersonReviewRepositoryService/ReadReviewsResponse")]
        LiteDBClient.PersonReviewRepository.Review[] ReadReviews(int[] ids);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonReviewRepositoryService/ReadReviews", ReplyAction="http://tempuri.org/IPersonReviewRepositoryService/ReadReviewsResponse")]
        System.Threading.Tasks.Task<LiteDBClient.PersonReviewRepository.Review[]> ReadReviewsAsync(int[] ids);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonReviewRepositoryService/ReadAllReviews", ReplyAction="http://tempuri.org/IPersonReviewRepositoryService/ReadAllReviewsResponse")]
        LiteDBClient.PersonReviewRepository.Review[] ReadAllReviews();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonReviewRepositoryService/ReadAllReviews", ReplyAction="http://tempuri.org/IPersonReviewRepositoryService/ReadAllReviewsResponse")]
        System.Threading.Tasks.Task<LiteDBClient.PersonReviewRepository.Review[]> ReadAllReviewsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonReviewRepositoryService/ReadReviewForMovie", ReplyAction="http://tempuri.org/IPersonReviewRepositoryService/ReadReviewForMovieResponse")]
        LiteDBClient.PersonReviewRepository.Review[] ReadReviewForMovie(int movieId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonReviewRepositoryService/ReadReviewForMovie", ReplyAction="http://tempuri.org/IPersonReviewRepositoryService/ReadReviewForMovieResponse")]
        System.Threading.Tasks.Task<LiteDBClient.PersonReviewRepository.Review[]> ReadReviewForMovieAsync(int movieId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonReviewRepositoryService/ReadReviewForUser", ReplyAction="http://tempuri.org/IPersonReviewRepositoryService/ReadReviewForUserResponse")]
        LiteDBClient.PersonReviewRepository.Review[] ReadReviewForUser(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonReviewRepositoryService/ReadReviewForUser", ReplyAction="http://tempuri.org/IPersonReviewRepositoryService/ReadReviewForUserResponse")]
        System.Threading.Tasks.Task<LiteDBClient.PersonReviewRepository.Review[]> ReadReviewForUserAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonReviewRepositoryService/UpdateReview", ReplyAction="http://tempuri.org/IPersonReviewRepositoryService/UpdateReviewResponse")]
        LiteDBClient.PersonReviewRepository.Review UpdateReview(LiteDBClient.PersonReviewRepository.Review model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonReviewRepositoryService/UpdateReview", ReplyAction="http://tempuri.org/IPersonReviewRepositoryService/UpdateReviewResponse")]
        System.Threading.Tasks.Task<LiteDBClient.PersonReviewRepository.Review> UpdateReviewAsync(LiteDBClient.PersonReviewRepository.Review model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonReviewRepositoryService/DeleteReview", ReplyAction="http://tempuri.org/IPersonReviewRepositoryService/DeleteReviewResponse")]
        bool DeleteReview(LiteDBClient.PersonReviewRepository.Review model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonReviewRepositoryService/DeleteReview", ReplyAction="http://tempuri.org/IPersonReviewRepositoryService/DeleteReviewResponse")]
        System.Threading.Tasks.Task<bool> DeleteReviewAsync(LiteDBClient.PersonReviewRepository.Review model);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPersonReviewRepositoryServiceChannel : LiteDBClient.PersonReviewRepository.IPersonReviewRepositoryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PersonReviewRepositoryServiceClient : System.ServiceModel.ClientBase<LiteDBClient.PersonReviewRepository.IPersonReviewRepositoryService>, LiteDBClient.PersonReviewRepository.IPersonReviewRepositoryService {
        
        public PersonReviewRepositoryServiceClient() {
        }
        
        public PersonReviewRepositoryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PersonReviewRepositoryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PersonReviewRepositoryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PersonReviewRepositoryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int CreatePerson(LiteDBClient.PersonReviewRepository.Person model) {
            return base.Channel.CreatePerson(model);
        }
        
        public System.Threading.Tasks.Task<int> CreatePersonAsync(LiteDBClient.PersonReviewRepository.Person model) {
            return base.Channel.CreatePersonAsync(model);
        }
        
        public LiteDBClient.PersonReviewRepository.Person ReadPerson(int id) {
            return base.Channel.ReadPerson(id);
        }
        
        public System.Threading.Tasks.Task<LiteDBClient.PersonReviewRepository.Person> ReadPersonAsync(int id) {
            return base.Channel.ReadPersonAsync(id);
        }
        
        public LiteDBClient.PersonReviewRepository.Person[] ReadPeople(int[] ids) {
            return base.Channel.ReadPeople(ids);
        }
        
        public System.Threading.Tasks.Task<LiteDBClient.PersonReviewRepository.Person[]> ReadPeopleAsync(int[] ids) {
            return base.Channel.ReadPeopleAsync(ids);
        }
        
        public LiteDBClient.PersonReviewRepository.Person[] ReadAllPeople() {
            return base.Channel.ReadAllPeople();
        }
        
        public System.Threading.Tasks.Task<LiteDBClient.PersonReviewRepository.Person[]> ReadAllPeopleAsync() {
            return base.Channel.ReadAllPeopleAsync();
        }
        
        public LiteDBClient.PersonReviewRepository.Person UpdatePerson(LiteDBClient.PersonReviewRepository.Person model) {
            return base.Channel.UpdatePerson(model);
        }
        
        public System.Threading.Tasks.Task<LiteDBClient.PersonReviewRepository.Person> UpdatePersonAsync(LiteDBClient.PersonReviewRepository.Person model) {
            return base.Channel.UpdatePersonAsync(model);
        }
        
        public bool DeletePerson(LiteDBClient.PersonReviewRepository.Person model) {
            return base.Channel.DeletePerson(model);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePersonAsync(LiteDBClient.PersonReviewRepository.Person model) {
            return base.Channel.DeletePersonAsync(model);
        }
        
        public int CreateReview(LiteDBClient.PersonReviewRepository.Review model) {
            return base.Channel.CreateReview(model);
        }
        
        public System.Threading.Tasks.Task<int> CreateReviewAsync(LiteDBClient.PersonReviewRepository.Review model) {
            return base.Channel.CreateReviewAsync(model);
        }
        
        public LiteDBClient.PersonReviewRepository.Review ReadReview(int id) {
            return base.Channel.ReadReview(id);
        }
        
        public System.Threading.Tasks.Task<LiteDBClient.PersonReviewRepository.Review> ReadReviewAsync(int id) {
            return base.Channel.ReadReviewAsync(id);
        }
        
        public LiteDBClient.PersonReviewRepository.Person ReadPersonByNameAndSurname(string name, string surname) {
            return base.Channel.ReadPersonByNameAndSurname(name, surname);
        }
        
        public System.Threading.Tasks.Task<LiteDBClient.PersonReviewRepository.Person> ReadPersonByNameAndSurnameAsync(string name, string surname) {
            return base.Channel.ReadPersonByNameAndSurnameAsync(name, surname);
        }
        
        public LiteDBClient.PersonReviewRepository.Review[] ReadReviews(int[] ids) {
            return base.Channel.ReadReviews(ids);
        }
        
        public System.Threading.Tasks.Task<LiteDBClient.PersonReviewRepository.Review[]> ReadReviewsAsync(int[] ids) {
            return base.Channel.ReadReviewsAsync(ids);
        }
        
        public LiteDBClient.PersonReviewRepository.Review[] ReadAllReviews() {
            return base.Channel.ReadAllReviews();
        }
        
        public System.Threading.Tasks.Task<LiteDBClient.PersonReviewRepository.Review[]> ReadAllReviewsAsync() {
            return base.Channel.ReadAllReviewsAsync();
        }
        
        public LiteDBClient.PersonReviewRepository.Review[] ReadReviewForMovie(int movieId) {
            return base.Channel.ReadReviewForMovie(movieId);
        }
        
        public System.Threading.Tasks.Task<LiteDBClient.PersonReviewRepository.Review[]> ReadReviewForMovieAsync(int movieId) {
            return base.Channel.ReadReviewForMovieAsync(movieId);
        }
        
        public LiteDBClient.PersonReviewRepository.Review[] ReadReviewForUser(int userId) {
            return base.Channel.ReadReviewForUser(userId);
        }
        
        public System.Threading.Tasks.Task<LiteDBClient.PersonReviewRepository.Review[]> ReadReviewForUserAsync(int userId) {
            return base.Channel.ReadReviewForUserAsync(userId);
        }
        
        public LiteDBClient.PersonReviewRepository.Review UpdateReview(LiteDBClient.PersonReviewRepository.Review model) {
            return base.Channel.UpdateReview(model);
        }
        
        public System.Threading.Tasks.Task<LiteDBClient.PersonReviewRepository.Review> UpdateReviewAsync(LiteDBClient.PersonReviewRepository.Review model) {
            return base.Channel.UpdateReviewAsync(model);
        }
        
        public bool DeleteReview(LiteDBClient.PersonReviewRepository.Review model) {
            return base.Channel.DeleteReview(model);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteReviewAsync(LiteDBClient.PersonReviewRepository.Review model) {
            return base.Channel.DeleteReviewAsync(model);
        }
    }
}
